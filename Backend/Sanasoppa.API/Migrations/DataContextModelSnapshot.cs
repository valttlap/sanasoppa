// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Sanasoppa.API.Data;
using Sanasoppa.API.Entities;

#nullable disable

namespace Sanasoppa.API.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "game_state", new[] { "not_started", "waiting_dasher", "giving_explanations", "dasher_valuing_explanations", "voting_explanations", "calculating_points", "game_ended" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Sanasoppa.API.Entities.Explanation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsRight")
                        .HasColumnType("boolean")
                        .HasColumnName("is_right");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer")
                        .HasColumnName("player_id");

                    b.Property<int>("RoundId")
                        .HasColumnType("integer")
                        .HasColumnName("round_id");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.HasKey("Id")
                        .HasName("pk_explanations");

                    b.HasIndex("PlayerId")
                        .HasDatabaseName("ix_explanations_player_id");

                    b.HasIndex("RoundId")
                        .HasDatabaseName("ix_explanations_round_id");

                    b.ToTable("explanations", (string)null);
                });

            modelBuilder.Entity("Sanasoppa.API.Entities.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<GameState>("GameState")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("game_state")
                        .HasDefaultValue(GameState.NotStarted)
                        .HasColumnName("game_state");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_games");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_games_name");

                    b.ToTable("games", (string)null);
                });

            modelBuilder.Entity("Sanasoppa.API.Entities.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<string>("ConnectionId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("connection_id");

                    b.Property<int?>("GameId")
                        .HasColumnType("integer")
                        .HasColumnName("game_id");

                    b.Property<bool>("IsHost")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_host");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("boolean")
                        .HasColumnName("is_online");

                    b.Property<int>("TotalPoints")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("total_points");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_players");

                    b.HasIndex("ConnectionId")
                        .IsUnique()
                        .HasDatabaseName("ix_players_connection_id");

                    b.HasIndex("GameId")
                        .HasDatabaseName("ix_players_game_id");

                    b.ToTable("players", (string)null);
                });

            modelBuilder.Entity("Sanasoppa.API.Entities.Round", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int>("DasherId")
                        .HasColumnType("integer")
                        .HasColumnName("dasher_id");

                    b.Property<int>("GameId")
                        .HasColumnType("integer")
                        .HasColumnName("game_id");

                    b.Property<bool>("IsCurrent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_current");

                    b.Property<string>("Word")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("word");

                    b.HasKey("Id")
                        .HasName("pk_rounds");

                    b.HasIndex("DasherId")
                        .HasDatabaseName("ix_rounds_dasher_id");

                    b.HasIndex("GameId")
                        .HasDatabaseName("ix_rounds_game_id");

                    b.ToTable("rounds", (string)null);
                });

            modelBuilder.Entity("Sanasoppa.API.Entities.Vote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int>("ExplanationId")
                        .HasColumnType("integer")
                        .HasColumnName("explanation_id");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer")
                        .HasColumnName("player_id");

                    b.Property<int>("RoundId")
                        .HasColumnType("integer")
                        .HasColumnName("round_id");

                    b.HasKey("Id")
                        .HasName("pk_votes");

                    b.HasIndex("ExplanationId")
                        .HasDatabaseName("ix_votes_explanation_id");

                    b.HasIndex("PlayerId")
                        .HasDatabaseName("ix_votes_player_id");

                    b.HasIndex("RoundId")
                        .HasDatabaseName("ix_votes_round_id");

                    b.ToTable("votes", (string)null);
                });

            modelBuilder.Entity("Sanasoppa.API.Entities.Explanation", b =>
                {
                    b.HasOne("Sanasoppa.API.Entities.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_explanations_players_player_id");

                    b.HasOne("Sanasoppa.API.Entities.Round", "Round")
                        .WithMany("Explanations")
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_explanations_rounds_round_id");

                    b.Navigation("Player");

                    b.Navigation("Round");
                });

            modelBuilder.Entity("Sanasoppa.API.Entities.Player", b =>
                {
                    b.HasOne("Sanasoppa.API.Entities.Game", "Game")
                        .WithMany("Players")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_players_games_game_id");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Sanasoppa.API.Entities.Round", b =>
                {
                    b.HasOne("Sanasoppa.API.Entities.Player", "Dasher")
                        .WithMany()
                        .HasForeignKey("DasherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_rounds_players_dasher_id");

                    b.HasOne("Sanasoppa.API.Entities.Game", "Game")
                        .WithMany("Rounds")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_rounds_games_game_id");

                    b.Navigation("Dasher");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Sanasoppa.API.Entities.Vote", b =>
                {
                    b.HasOne("Sanasoppa.API.Entities.Explanation", "Explanation")
                        .WithMany("Votes")
                        .HasForeignKey("ExplanationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_votes_explanations_explanation_id");

                    b.HasOne("Sanasoppa.API.Entities.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_votes_players_player_id");

                    b.HasOne("Sanasoppa.API.Entities.Round", "Round")
                        .WithMany("Votes")
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_votes_rounds_round_id");

                    b.Navigation("Explanation");

                    b.Navigation("Player");

                    b.Navigation("Round");
                });

            modelBuilder.Entity("Sanasoppa.API.Entities.Explanation", b =>
                {
                    b.Navigation("Votes");
                });

            modelBuilder.Entity("Sanasoppa.API.Entities.Game", b =>
                {
                    b.Navigation("Players");

                    b.Navigation("Rounds");
                });

            modelBuilder.Entity("Sanasoppa.API.Entities.Round", b =>
                {
                    b.Navigation("Explanations");

                    b.Navigation("Votes");
                });
#pragma warning restore 612, 618
        }
    }
}
